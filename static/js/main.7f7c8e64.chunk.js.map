{"version":3,"sources":["components/Movie.js","components/MoivesList.js","components/PageNation.js","components/SearchBar.js","App.js","reportWebVitals.js","index.js"],"names":["Movie","props","state","result","this","genres","map","genre","index","id","src","poster_img","alt","title","year","icon","faStarHalfAlt","className","rating","runtime","summary","Component","MoivesList","movies","movie","medium_cover_image","PageNation","setCurrentPage","page","alert","prevPage","currentPage","nextPage","totalLength","postsPerPage","Math","ceil","pageNumbers","i","push","pageList","onClick","SearchBar","handleChange","e","setState","target","name","value","SearchMovie","search","search_title","toLowerCase","SearchAllMovie","a","document","getElementById","testfunc","handleSelect","per_page","onChange","label","type","placeholder","size","App","getMovies","console","log","axios","get","res","data","addIndex","length","filterd_movies","currentPosts","totalPosts","indexOfLast","indexOfFirst","slice","indexOf","idx","filt_movies","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7f7c8e64.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"../css/Movie.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faStarHalfAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nclass Movie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const result = this.props.genres.map((genre, index) => (\n      <span key={index}> {genre} </span>\n    ));\n\n    return (\n      <div id=\"movie_wrap\">\n        <div id=\"img_box\">\n          <img src={this.props.poster_img} alt=\"movie profile\" />\n        </div>\n        <div id=\"text_box\">\n          <div> {this.props.title} </div>\n          <div> {this.props.year} </div>\n          <div> {result} </div>\n          <div>\n            <FontAwesomeIcon icon={faStarHalfAlt} className=\"half_star\" />\n            {this.props.rating}\n          </div>\n          <div> {this.props.runtime}분 </div>\n          <div> {this.props.summary} </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Movie;\n","import React, { Component } from \"react\";\nimport Movie from \"./Movie\";\nimport \"../css/MoviesList.css\";\n\nclass MoivesList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { movies } = this.props;\n    const result = movies.map((movie) => (\n      <Movie\n        // 키값 = {movie.넘길 데이터 경로}\n        key={movie.id}\n        poster_img={movie.medium_cover_image}\n        genres={movie.genres}\n        title={movie.title}\n        year={movie.year}\n        summary={movie.summary}\n        runtime={movie.runtime}\n        rating={movie.rating}\n      ></Movie>\n    ));\n    return <div id=\"movielist_wrap\">{result}</div>;\n  }\n}\n\nexport default MoivesList;\n","\nimport React,{Component} from 'react';\nimport \"../css/PageNation.css\";\n\nclass PageNation extends Component {\n\n  setCurrentPage=(page)=>{\n      alert(\"클릭한 페이지(PageNation):\"+page)\n      this.props.setCurrentPage(page)\n  }\n\n  prevPage=()=>{\n    alert(\"이전!\")\n    const currentPage=this.props.currentPage\n    if(currentPage===1){\n      alert(\"더이상 갈수 없습니다!\")\n      return\n    }\n    this.props.setCurrentPage(currentPage-1)\n  }\n\n  nextPage=()=>{\n    alert(\"다음!\")\n    const currentPage=this.props.currentPage\n    const {totalLength,postsPerPage}=this.props\n    const lastPage=Math.ceil(totalLength/postsPerPage)\n    if(currentPage===lastPage){\n      alert(\"더이상 갈 수 없습니다!\")\n      return\n    }\n    this.props.setCurrentPage(currentPage+1)\n  }\n\n  render(){\n    let pageNumbers=[];\n    const {totalLength,postsPerPage}=this.props\n    //10,3\n                            //10/3 -> 3.3 -> 4\n                            //ceiling - 천장,올림함수\n    for(let i=1; i<=Math.ceil(totalLength/postsPerPage); i++){\n      pageNumbers.push(i)\n    }\n\n    const pageList=pageNumbers.map(page=>\n      <span id=\"page\" key={page}\n      onClick={()=>this.setCurrentPage(page)}>\n      {page}\n      </span>\n    )\n\n    return (\n      <div id=\"page-nation\">\n        <span>페이지당 포스트 갯수:{postsPerPage}</span><br/>\n        <span>총 포스트 갯수:{totalLength}</span><br/>\n        <span id=\"page\" onClick={this.prevPage}>&lt;</span>\n        {pageList}\n        <span id=\"page\" onClick={this.nextPage}>&gt;</span>\n      </div>\n    );\n  }\n}\n\nexport default PageNation;\n","import React, { Component } from \"react\";\r\nimport \"../css/SearchBar.css\";\r\n\r\nclass SearchBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      search_title: \"\",\r\n    };\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    // 인풋박스 핸들체인지\r\n    // 현재 검색 인풋창 값을 스테이트(search_title)에 저장\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  SearchMovie = () => {\r\n    alert(\"검색(SearchBar)\");\r\n    const { search_title } = this.state;\r\n    const search = search_title.toLowerCase(); // 소문자로 변환\r\n    this.props.SearchMovie(search);\r\n  };\r\n\r\n  //   SearchAllMovie = async () => {\r\n  //     alert('전체 검색(SearchBar)')\r\n  //     this.props.SearchAllMovie()\r\n  //   }\r\n\r\n  SearchAllMovie = async () => {\r\n    await alert(\"전체 검색(SearchBar에만 존재)\");\r\n    // 인풋 창 비우고 서치 함수까지 텀을 주기 위해 사용 (비동기가 필요)\r\n    document.getElementById(\"search_input\").value = \"\";\r\n    this.setState({\r\n      search_title: \"\",\r\n      currentPage: 1,\r\n    });\r\n\r\n    this.SearchMovie();\r\n  };\r\n\r\n  testfunc = () => {\r\n    alert(\"체크(SearchBar)\");\r\n    this.props.testfunc();\r\n  };\r\n\r\n  handleSelect = (e) => {\r\n    // 셀렉트박스 핸들체인지\r\n    // 선택된 셀렉트 박스의 값을 App에 전달\r\n    // postsPerPage가 App의 state에 있기 때문\r\n    const per_page = e.target.value;\r\n    this.props.handleSelect(per_page);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"search_wrap\">\r\n          <select\r\n            id=\"select_per_page\"\r\n            name=\"select_per_page\"\r\n            onChange={this.handleSelect}\r\n          >\r\n            <optgroup label=\"한 페이지에 표시할 영화수\">\r\n              <option value=\"3\">3</option>\r\n              <option value=\"4\">4</option>\r\n              <option value=\"5\">5</option>\r\n            </optgroup>\r\n          </select>\r\n          <input\r\n            type=\"text\"\r\n            id=\"search_input\"\r\n            placeholder=\"제목 검색(영어)\"\r\n            size=\"15\"\r\n            name=\"search_title\"\r\n            onChange={this.handleChange}\r\n          />\r\n          <button id=\"search_btn\" onClick={this.SearchMovie}>\r\n            검색\r\n          </button>\r\n          <button onClick={this.SearchAllMovie}>전체 보기</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import \"./App.css\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport MoivesList from \"./components/MoivesList.js\";\nimport PageNation from \"./components/PageNation.js\";\nimport SearchBar from \"./components/SearchBar.js\"\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movies: [],\n      currentPage: 1,\n      postsPerPage: 3,\n      // search_title: \"\",\n      filterd_movies: [],\n    };\n  }\n\n  componentDidMount() {\n    // 데이터 요청 함수 호출\n    this.getMovies();\n  }\n\n  getMovies = async () => {\n    // yts에 json 데이터 요청\n    console.log(\"Movies Json 요청\");\n    const res = await axios.get(\"https://yts.mx/api/v2/list_movies.json\");\n    console.log(res);\n    console.log(res.data.data.movies);\n\n    this.setState({\n      movies: res.data.data.movies, // 모든 값을 받을 배열\n    });\n\n    this.addIndex();\n  };\n\n  addIndex = () => {\n    // 무비 객체에 idx 값 추가할 함수\n    // idx값은 이후 indexOf로 검색 비교할 때 쓰임\n    const { movies } = this.state;\n    for (let i = 0; i < movies.length; i++) {\n      movies[i][\"idx\"] = 0;\n    }\n\n    this.setState({\n      filterd_movies: movies, // 검색된 값만 받아서 새로 정렬할 배열\n    });\n  };\n\n  currentPosts = (totalPosts) => {\n    const { currentPage, postsPerPage } = this.state;\n    const indexOfLast = currentPage * postsPerPage;\n    const indexOfFirst = indexOfLast - postsPerPage;\n    const slicePosts = totalPosts.slice(indexOfFirst, indexOfLast);\n\n    return slicePosts;\n  };\n\n  setCurrentPage = (page) => {\n    alert(\"넘어온 페이지(App):\" + page);\n    this.setState({\n      currentPage: page,\n    });\n  };\n\n  SearchMovie = (search) => {\n    alert('검색(App)')\n    const { movies } = this.state;\n    // const search = search_title.toLowerCase(); // 소문자로 변환\n\n    for (let i = 0; i < movies.length; i++) {\n      // 실질적 검사 함수\n      // 무비 타이틀(소문자)와 검색값이 일치하지 않으면 idx값에 -1 일치하면 0을 대입\n      if (movies[i].title.toLowerCase().indexOf(search) !== -1) {\n        // indexOf값이 -1이면 일치하는 경우가 없는 것\n        // 하지만 -1이 아닌 경우 이기 때문에 일치 할 때\n        movies[i].idx = 0;\n      } else {\n        movies[i].idx = -1;\n      }\n    }\n\n    let filt_movies = movies.filter((movie) => {\n      // idx 값이 -1이 아닌 영화만 모아서 새로 배열을 만듬\n      // 제목이 검색값과 일치하는 영화 모음\n      return movie.idx !== -1;\n    });\n\n    alert('검색된 영화 개수 : ' + filt_movies.length)\n\n    this.setState({\n      filterd_movies: filt_movies,\n      currentPage: 1, // 검색하면 첫 페이지로 이동\n    });\n  };\n\n  handleSelect = (per_page) => {\n    alert('페이지당 영화 표시 개수 : ' + per_page)\n    this.setState({\n      currentPage: 1,\n      postsPerPage: per_page\n    });\n  }\n\n  render() {\n    const { postsPerPage, currentPage, filterd_movies } = this.state;\n    return (\n      <div id=\"App\">\n        <SearchBar\n          SearchMovie={this.SearchMovie}\n          handleSelect={this.handleSelect}\n        ></SearchBar>\n        <MoivesList movies={this.currentPosts(filterd_movies)}></MoivesList>\n        <PageNation\n          currentPage={currentPage}\n          totalLength={filterd_movies.length}\n          postsPerPage={postsPerPage}\n          setCurrentPage={this.setCurrentPage}\n        ></PageNation>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}